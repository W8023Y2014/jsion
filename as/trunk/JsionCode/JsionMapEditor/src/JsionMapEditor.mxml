<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   width="1000" height="600" 
					   applicationComplete="init(event)" 
					   resize="windowedapplication1_resizeHandler(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import editor.AlertFrame;
			import editor.CoordView;
			import editor.EditorMenu;
			import editor.EditorTool;
			import editor.ResourcePreviewer;
			import editor.SmallMap;
			import editor.showers.MapShower;
			import editor.tabs.BuildingsTab;
			import editor.tabs.NPCsTab;
			import editor.tabs.ResourceTabbed;
			
			import jsion.rpg.engine.RPGEngine;
			import jsion.utils.DisposeUtil;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import org.aswing.AsWingManager;
			import org.aswing.BorderLayout;
			import org.aswing.Container;
			import org.aswing.JPanel;
			import org.aswing.JWindow;
			import org.aswing.SoftBoxLayout;
			import org.aswing.event.ResizedEvent;
			
			/**
			 * 主容器
			 */ 
			private var mainWindow:JWindow;
			
			/**
			 * 顶部容器
			 */ 
			private var topContainer:JPanel;
			
			/**
			 * 底部容器
			 */ 
			private var bottomContainer:JPanel;
			
			/**
			 * 左侧容器
			 */ 
			private var leftContainer:JPanel;
			
			/**
			 * 右侧容器
			 */ 
			private var rightContainer:JPanel;
			
			/**
			 * 地图显示容器
			 */ 
			private var mainContainer:JPanel;
			
			/**
			 * 菜单容器
			 */
			private var menuContainer:EditorMenu;
			
			/**
			 * 工具容器
			 */ 
			private var toolContainer:JPanel;
			
			/**
			 * 状态栏
			 */ 
			private var statusContainer:JPanel;
			
			/**
			 * 世界地图
			 */ 
			public var gameMap:MapShower;
			
			
			/**
			 * 缩略地图
			 */ 
			private var smallMap:SmallMap;
			
			/**
			 * 坐标信息
			 */ 
			private var coordView:CoordView;
			
			/**
			 * 资源分类标签容器
			 */ 
			private var resourceTabbed:ResourceTabbed;
			
			/**
			 * 资源预览器
			 */ 
			private var previewer:ResourcePreviewer;
			
			
			public function get Window():JWindow
			{
				return mainWindow;
			}
			
			protected function init(event:FlexEvent):void
			{
				statusBar.visible = false;
				
				this.nativeWindow.x = (Capabilities.screenResolutionX - this.nativeWindow.width) / 2;
				this.nativeWindow.y = (Capabilities.screenResolutionY - this.nativeWindow.height) / 2;
				
				var bytes:ByteArray = new ByteArray();
				var file:File = new File(File.applicationDirectory.resolvePath("config.xml").nativePath);
				var fs:FileStream = new FileStream();
				fs.open(file, FileMode.READ);
				fs.readBytes(bytes);
				fs.close();
				var configXml:XML = new XML(bytes);
				
				JsionCoreSetup(stage, configXml);
				
				AsWingManager.initAsStandard(stage);
				
				//UIManager.setLookAndFeel(new AeonLAF());
				
				mainWindow = new JWindow();
				
				// 得到窗口容器
				var pane:Container = mainWindow.getContentPane();
				pane.setLayout(new BorderLayout(2, 2));
				
				
				topContainer = new JPanel(new SoftBoxLayout(SoftBoxLayout.Y_AXIS));
				pane.append(topContainer, BorderLayout.NORTH);
				
				leftContainer = new JPanel(new SoftBoxLayout(SoftBoxLayout.Y_AXIS));
				leftContainer.setPreferredWidth(5);
				pane.append(leftContainer, BorderLayout.WEST);
				
				rightContainer = new JPanel(new SoftBoxLayout(SoftBoxLayout.Y_AXIS));
				rightContainer.setPreferredWidth(5);
				pane.append(rightContainer, BorderLayout.EAST);
				
				bottomContainer = new JPanel(new SoftBoxLayout(SoftBoxLayout.Y_AXIS));
				bottomContainer.setPreferredHeight(5);
				pane.append(bottomContainer, BorderLayout.SOUTH);
				
				mainContainer = new JPanel();
				pane.append(mainContainer, BorderLayout.CENTER);
				mainContainer.addEventListener(ResizedEvent.RESIZED, __mainContainerResizeHandler);
				
				statusContainer = new JPanel();
				//bottomContainer.append(statusContainer);
				
				
				menuContainer = new EditorMenu(this);
				topContainer.append(menuContainer);
				
				toolContainer = new JPanel();
				topContainer.append(toolContainer);
				toolContainer.append(new EditorTool(this));
				
				
//				menuContainer.setOpaque(true);
//				mainContainer.setOpaque(true);
//				leftContainer.setOpaque(true);
//				toolContainer.setOpaque(true);
//				statusContainer.setOpaque(true);
//				rightContainer.setOpaque(true);
//				bottomContainer.setOpaque(true);
				
				
				mainWindow.setSizeWH(width, height);
				mainWindow.show();
			}
			
			private function setLeftView():void
			{
				leftContainer.setPreferredWidth(JsionEditor.mapConfig.SmallMapWidth + 5);
				
				if(smallMap) leftContainer.remove(smallMap);
				DisposeUtil.free(smallMap);
				smallMap = new SmallMap(this);
				leftContainer.append(smallMap);
				
				
				
				//resourceTabbed.updateHeight(leftContainer, smallMap.height + coordView.height);
			}
			
			private function setRightView():void
			{
				rightContainer.setPreferredWidth(165);
				
				if(previewer) rightContainer.remove(previewer);
				DisposeUtil.free(previewer);
				previewer = new ResourcePreviewer();
				rightContainer.append(previewer);
				
				if(resourceTabbed) rightContainer.remove(resourceTabbed);
				DisposeUtil.free(resourceTabbed);
				resourceTabbed = new ResourceTabbed(this, previewer);
				rightContainer.append(resourceTabbed);
				
				
				
				if(coordView) rightContainer.remove(coordView);
				DisposeUtil.free(coordView);
				coordView = new CoordView();
				rightContainer.append(coordView);
			}
			
			public function msg(text:String, textColor:uint = 0xFF0000, t:String = "提示"):void
			{
				//Alert.show(text, t);
				AlertFrame.msg(this, text, textColor, t);
			}
			
			public function showMap(configPath:String):void
			{
				DisposeUtil.free(gameMap);
				RPGEngine.setMapsRoot(JsionEditor.MAP_OUTPUT_ROOT);
				gameMap = new MapShower(mainContainer.width, mainContainer.height, configPath);
				mainContainer.addChild(gameMap);
				
				setLeftView();
				
				setRightView();
				
				gameMap.setSmallMapShower(smallMap);
				gameMap.setCoordView(coordView);
			}
			
			public function fileNewCallabck():void
			{
				clearAll();
			}
			
			public function fileOpenCallback(configPath:String):void
			{
				clearAll();
				showMap(configPath);
			}
			
			public function clearAll():void
			{
				DisposeUtil.free(gameMap);
				gameMap = null;
				
				if(smallMap) leftContainer.remove(smallMap);
				DisposeUtil.free(smallMap);
				smallMap = null;
				
				if(coordView) leftContainer.remove(coordView);
				DisposeUtil.free(coordView);
				coordView = null;
				
				if(resourceTabbed) leftContainer.remove(resourceTabbed);
				DisposeUtil.free(resourceTabbed);
				resourceTabbed = null;
			}
			
			protected function __mainContainerResizeHandler(e:ResizedEvent):void
			{
				if(gameMap) gameMap.setCameraWH(mainContainer.width, mainContainer.height);
				if(smallMap) smallMap.redrawDisplayArea();
				//if(resourceTabbed) resourceTabbed.updateHeight(leftContainer, smallMap.height + coordView.height);
			}


			protected function windowedapplication1_resizeHandler(event:ResizeEvent):void
			{
				// TODO Auto-generated method stub
				
				if(mainWindow) mainWindow.setSizeWH(width, height);
			}

		]]>
	</fx:Script>
</s:WindowedApplication>
